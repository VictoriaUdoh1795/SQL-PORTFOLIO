
---1. RETRIEVE CUSTOMER ORDERS WITH PRODUCT DETAILS
---This query fetches customer orders along with product details and pricing.

SELECT C.CustomerID, P.Name AS ProductName, SOH.SalesOrderID, SOD.OrderQty, SOD.UnitPrice
FROM Sales.SalesOrderDetail SOD
JOIN Sales.SalesOrderHeader SOH ON SOD.SalesOrderID = SOH.SalesOrderID
JOIN Sales.Customer C ON SOH.CustomerID = C.CustomerID
JOIN Production.Product P ON SOD.ProductID = P.ProductID;


---2. GET AVERAGE SALES PER TERRITORY USING SUBQUERY
---This Calculates average revenue per sales territory.

SELECT TerritoryID,
       (SELECT AVG(TotalDue)
        FROM Sales.SalesOrderHeader SOH
        WHERE SOH.TerritoryID = TR.TerritoryID) AS AverageSales
FROM Sales.SalesTerritory TR;


---3. LIST EMPLOYEES WITH THEIR JOB TITLES AND DEPARTMENTS
----Displays employees with their job titles and departments.

SELECT DISTINCT E.BusinessEntityID, P.FirstName, P.LastName, E.JobTitle, D.Name AS Department
FROM HumanResources.Employee E
JOIN Person.Person P 
    ON E.BusinessEntityID = P.BusinessEntityID
JOIN HumanResources.EmployeeDepartmentHistory EDH 
    ON E.BusinessEntityID = EDH.BusinessEntityID
JOIN HumanResources.Department D 
    ON EDH.DepartmentID = D.DepartmentID
	WHERE EDH.EndDate IS NULL; -- Ensures we get the current department only


---4. GET THE 5 CHEAPEST PRODUCT SOLD
---Retrieves the 5 cheapest product ever sold.

SELECT TOP 5 P.Name AS ProductName, SOD.UnitPrice
FROM Sales.SalesOrderDetail SOD
JOIN Production.Product P ON SOD.ProductID = P.ProductID
ORDER BY SOD.UnitPrice ASC;


---5. RETRIEVE CUSTOMERS WHO HAVE PLACED MORE THAN 10 ORDERS
---Lists customers with more than ten orders.

SELECT SC.CustomerID, COUNT(SOH.SalesOrderID) AS OrderCount
FROM Sales.Customer SC
JOIN Sales.SalesOrderHeader SOH ON SC.CustomerID = SOH.CustomerID
GROUP BY SC.CustomerID
HAVING COUNT(SOH.SalesOrderID) > 10;


---6. FIND PRODUCTS WITH THE HIGHEST AND LOWEST LIST PRICES USING A SUBQUERY
---Retrieves the most and least expensive products.

SELECT ProductID, Name, ListPrice
FROM Production.Product
WHERE ListPrice = (SELECT MAX(ListPrice) FROM Production.Product)
   OR ListPrice = (SELECT MIN(ListPrice) FROM Production.Product);



---7. RETRIEVE ORDER DETAILS ALONG WITH THE VENDOR THAT SUPPLIED EACH PRODUCT
---Links order details with the vendors supplying the products.

SELECT SOD.SalesOrderID, PP.Name AS ProductName, SOD.OrderQty, V.Name AS VendorName
FROM Sales.SalesOrderDetail SOD
JOIN Production.Product PP ON SOD.ProductID = PP.ProductID
JOIN Purchasing.ProductVendor PV ON PP.ProductID = PV.ProductID
JOIN Purchasing.Vendor V ON PV.BusinessEntityID = V.BusinessEntityID;


--8. RETRIEVE CUSTOMERS WHO HAVE PURCHASED MORE THAN 6 TYPES OF PRODUCT
---Identifies customers who bought diverse product types.

SELECT SSO.CustomerID, COUNT(DISTINCT SOD.ProductID) AS ProductTypes
FROM Sales.SalesOrderHeader SSO
JOIN Sales.SalesOrderDetail SOD ON SSO.SalesOrderID = SOD.SalesOrderID
GROUP BY SSO.CustomerID
HAVING COUNT(DISTINCT SOD.ProductID) > 6
ORDER BY ProductTypes ASC;


---9. FIND CUSTOMERS WHO HAVEN'T MADE A PURCHASE IN THE LAST YEAR
---Identifies inactive customers.

SELECT SC.CustomerID, PP.FirstName, PP.LastName
FROM Sales.Customer SC
JOIN Person.Person PP ON SC.PersonID = PP.BusinessEntityID
LEFT JOIN Sales.SalesOrderHeader SOH ON SC.CustomerID = SOH.CustomerID
      AND SOH.OrderDate >= DATEADD(YEAR, -1, GETDATE())
WHERE SOH.SalesOrderID IS NULL;


---10. FIND THE TOTAL REVENUE GENERATED BY EACH SALES REPRESENTATIVE
---Retrieves revenue per salesperson.

SELECT HR.BusinessEntityID, PP.FirstName, PP.LastName, SUM(soh.TotalDue) AS TotalRevenue
FROM Sales.SalesPerson SSP
JOIN HumanResources.Employee HR ON SSP.BusinessEntityID = HR.BusinessEntityID
JOIN Sales.SalesOrderHeader soh ON SSP.BusinessEntityID = soh.SalesPersonID
JOIN Person.Person PP ON HR.BusinessEntityID = PP.BusinessEntityID
GROUP BY HR.BusinessEntityID, PP.FirstName, PP.LastName;


 --- 11. RETRIEVE THE MOST FREQUENTLY PURCHASED PRODUCT

 SELECT ProductID, Name
FROM Production.Product
WHERE ProductID = (
    SELECT TOP 1 ProductID 
    FROM Sales.SalesOrderDetail 
    GROUP BY ProductID
    ORDER BY COUNT(*) DESC);


--- 12.FIND EMPLOYEES WHO HAVE NEVER MADE A SALE

SELECT BusinessEntityID, FirstName, LastName
FROM Person.Person
WHERE BusinessEntityID IN (
    SELECT BusinessEntityID 
    FROM HumanResources.Employee 
    WHERE BusinessEntityID NOT IN 
	(SELECT DISTINCT SalesPersonID FROM Sales.SalesOrderHeader 
	WHERE SalesPersonID IS NOT NULL));


---13. LIST VENDORS AND THEIR SUPPLIED PRODUCTS
---Shows vendors and the products they supply.

SELECT PV.Name AS VendorName, P.Name AS ProductName
FROM Purchasing.Vendor PV
JOIN Purchasing.ProductVendor PP ON PV.BusinessEntityID = PV.BusinessEntityID
JOIN Production.Product P ON PP.ProductID = P.ProductID;


---14.FIND EMPLOYEES WHO HAVE NEVER MADE A SALE

SELECT BusinessEntityID, FirstName, LastName
FROM Person.Person
WHERE BusinessEntityID IN (
    SELECT BusinessEntityID 
    FROM HumanResources.Employee 
    WHERE BusinessEntityID NOT IN 
	(SELECT DISTINCT SalesPersonID FROM Sales.SalesOrderHeader 
	WHERE SalesPersonID IS NOT NULL));


---15.FIND EMPLOYEES WHO HAVE WORKED IN MORE THAN ONE DEPARTMENT
---Lists employees with experience in multiple departments.

SELECT e.BusinessEntityID, p.FirstName, p.LastName, 
COUNT(DISTINCT edh.DepartmentID) AS DeptCount
FROM HumanResources.Employee e
JOIN HumanResources.EmployeeDepartmentHistory edh ON e.BusinessEntityID = edh.BusinessEntityID
JOIN Person.Person p ON e.BusinessEntityID = p.BusinessEntityID
GROUP BY e.BusinessEntityID, p.FirstName, p.LastName
HAVING COUNT(DISTINCT edh.DepartmentID) > 1;











   



